module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { create: peg$parsecreate },
        peg$startRuleFunction  = peg$parsecreate,

        peg$c0 = "alter",
        peg$c1 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
        peg$c2 = "create",
        peg$c3 = { type: "literal", value: "CREATE", description: "\"CREATE\"" },
        peg$c4 = peg$FAILED,
        peg$c5 = null,
        peg$c6 = function(schema, table, doc, params) {
              return {
                  type:'procedure',
                    name: '['+schema+'].['+table+']',
                    schema: schema,
                    table: table,
                    doc: doc && doc.single.replace(/^\s+/, '').replace(/\s+$/, '') || false,
                    params:params
                }
            },
        peg$c7 = function(schema, table, doc, fields) {
              return {
                  type:'table type',
                    name: '['+schema+'].['+table+']',
                    schema: schema,
                    table: table,
                    doc: doc && doc.single.replace(/^\s+/, '').replace(/\s+$/, '') || false,
                    fields:fields
                }
            },
        peg$c8 = function(schema, table, doc, fc) {
              return {
                  type: 'table',
                    name: '['+schema+'].['+table+']',
                    schema: schema,
                    table: table,
                    doc: doc && doc.single.replace(/^\s+/, '').replace(/\s+$/, '') || false,
                    fields: fc.filter(function(x){return x.isField}),
                    constraints: fc.filter(function(x){return x.isConstraint})
                }
            },
        peg$c9 = "[",
        peg$c10 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c11 = [],
        peg$c12 = /^[^\]]/,
        peg$c13 = { type: "class", value: "[^\\]]", description: "[^\\]]" },
        peg$c14 = "]",
        peg$c15 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c16 = function(str) {return str},
        peg$c17 = /^[A-Za-z0-9_$]/,
        peg$c18 = { type: "class", value: "[A-Za-z0-9_$]", description: "[A-Za-z0-9_$]" },
        peg$c19 = function(n, o) {
                  return {
                      name: n,
                      order: o
                    }
                },
        peg$c20 = function(n, o, m) {
                  m.unshift({
                      name: n,
                        order: o
                    });
                    return m
                },
        peg$c21 = ".",
        peg$c22 = { type: "literal", value: ".", description: "\".\"" },
        peg$c23 = function(name) {return name},
        peg$c24 = function(name) {return '['+name+'].'},
        peg$c25 = function(ns, n) {return (ns||'')+'['+n+']'},
        peg$c26 = function(ws, r) { return [ws, r]},
        peg$c27 = function(f, p, q, e) {

          var x=[p];
          q.forEach(function(pp){
            x.push(pp[0]);
            x.push(pp[1]);
          });
          x.push(e)
          var lastParam;
          var lastComment=f[0] && f[f.length-1].multi;
          var y = [];
          x.forEach(function(pp, i){
            if (i % 2 === 0) {
               lastParam = pp;
               lastComment && (pp.doc = lastComment.replace(/^\s+/, '').replace(/\s+$/, '')) && (lastComment=null);
               y.push(pp);
            } else {
               if (pp.length && pp[0]){
                 pp[0].single && !lastParam.doc && (lastParam.doc = pp[0].single.replace(/^\s+/, '').replace(/\s+$/, ''));
                 lastComment = pp[pp.length-1].multi;
                 pp[0].multi && (lastComment = pp[0].multi);
               }
            }
          });
          return y

        },
        peg$c28 = function(f, p, q, e) {

          var x=[p];
          q.forEach(function(pp){
            x.push(pp[0]);
            x.push(pp[1]);
          });
          x.push(e)
          var lastParam;
          var lastComment=f[0] && f[f.length-1].multi;
          var y = [];
          x.forEach(function(pp, i){
            if (i % 2 === 0) {
               lastParam = pp;
               lastComment && (pp.doc = lastComment.replace(/^\s+/, '').replace(/\s+$/, '')) && (lastComment=null);
               y.push(pp);
            } else {
               if (pp.length && pp[0]){
                 pp[0].single && !lastParam.doc && (lastParam.doc = pp[0].single.replace(/^\s+/, '').replace(/\s+$/, ''));
                 lastComment = pp[pp.length-1].multi;
                 pp[0].multi && (lastComment = pp[0].multi);
               }
            }
          });
          return y


        },
        peg$c29 = function(ws, r) {return [ws, r]},
        peg$c30 = function(f, p, q, e) {
          var x=[p];
          q.forEach(function(pp){
            x.push(pp[0]);
            x.push(pp[1]);
          });
          x.push(e)
          var lastParam;
          var lastComment=f[0] && f[f.length-1].multi;
          var y = [];
          x.forEach(function(pp, i){
            if (i % 2 === 0) {
               lastParam = pp;
               lastComment && (pp.doc = lastComment.replace(/^\s+/, '').replace(/\s+$/, '')) && (lastComment=null);
               y.push(pp);
            } else {
               if (pp.length && pp[0]){
                 pp[0].single && !lastParam.doc && (lastParam.doc = pp[0].single.replace(/^\s+/, '').replace(/\s+$/, ''));
                 lastComment = pp[pp.length-1].multi;
                 pp[0].multi && (lastComment = pp[0].multi);
               }
            }
          });
          return y

          },
        peg$c31 = "out",
        peg$c32 = { type: "literal", value: "out", description: "\"out\"" },
        peg$c33 = "=",
        peg$c34 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c35 = "readonly",
        peg$c36 = { type: "literal", value: "READONLY", description: "\"READONLY\"" },
        peg$c37 = function(n, t, o, d) {return {name:n, def:t, out:!!o, default:!!d}},
        peg$c38 = "@",
        peg$c39 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c40 = function(n) {return n},
        peg$c41 = function(n, t, i, not_nullable, d) {
          var identity = !!i;
            var result = {
              column:n,
              type:t.type,
              nullable:!not_nullable,
              length:Array.isArray(t.size) ? t.size[0] : t.size,
              scale:Array.isArray(t.size) ? t.size[1] : null,
              identity: i || false,
              isField:true,
              default:d
            }
            return result
        },
        peg$c42 = "default",
        peg$c43 = { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
        peg$c44 = function(v) {return v},
        peg$c45 = "CONSTRAINT",
        peg$c46 = { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
        peg$c47 = function(n, c) {
          c.isConstraint = true;
          c.name = n;
          return c
        },
        peg$c48 = "primary key",
        peg$c49 = { type: "literal", value: "PRIMARY KEY", description: "\"PRIMARY KEY\"" },
        peg$c50 = function(c, n, o) {
              return {
                  type: "PRIMARY KEY",
                    clustered: !!c && c.toLowerCase() === "clustered",
                    columns: n,
                    order: o
                }
            },
        peg$c51 = "clustered",
        peg$c52 = { type: "literal", value: "CLUSTERED", description: "\"CLUSTERED\"" },
        peg$c53 = "nonclustered",
        peg$c54 = { type: "literal", value: "NONCLUSTERED", description: "\"NONCLUSTERED\"" },
        peg$c55 = "asc",
        peg$c56 = { type: "literal", value: "ASC", description: "\"ASC\"" },
        peg$c57 = "desc",
        peg$c58 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c59 = "foreign key",
        peg$c60 = { type: "literal", value: "FOREIGN KEY", description: "\"FOREIGN KEY\"" },
        peg$c61 = "REFERENCES",
        peg$c62 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
        peg$c63 = function(n, t, c) {
              return {
                  type: "FOREIGN KEY",
                    referenceTable: t,
                    referenceColumn: c
                }
            },
        peg$c64 = "unique",
        peg$c65 = { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
        peg$c66 = function(n) {
                return {
                  type: "UNIQUE",
                    columns: n
                }
           },
        peg$c67 = "null",
        peg$c68 = { type: "literal", value: "NULL", description: "\"NULL\"" },
        peg$c69 = "not null",
        peg$c70 = { type: "literal", value: "NOT NULL", description: "\"NOT NULL\"" },
        peg$c71 = function(x) {return x.toLowerCase() === "not null"},
        peg$c72 = "IDENTITY",
        peg$c73 = { type: "literal", value: "IDENTITY", description: "\"IDENTITY\"" },
        peg$c74 = function(a) {return a || {}},
        peg$c75 = function(s, i) {return {seed: s, increment: i}},
        peg$c76 = function(n1, n2) {return {type:'table', typeName:n1+'.'+n2}},
        peg$c77 = "max",
        peg$c78 = { type: "literal", value: "max", description: "\"max\"" },
        peg$c79 = function(s) {return s},
        peg$c80 = function(s1, s2) {return [s1,s2]},
        peg$c81 = function(n, size) {return {type:n.toLowerCase(), size:size}},
        peg$c82 = function() {var result = Number.parseFloat(text()); return Number.isNaN(result)?text():result;},
        peg$c83 = /^[^'\r\n]/,
        peg$c84 = { type: "class", value: "[^'\\r\\n]", description: "[^'\\r\\n]" },
        peg$c85 = function(s) {return s.join('')},
        peg$c86 = function() {return '\''},
        peg$c87 = /^[0-9]/,
        peg$c88 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c89 = "'",
        peg$c90 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c91 = "e",
        peg$c92 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c93 = function() {return },
        peg$c94 = function(ws) {return ws.filter(function(x){return x})},
        peg$c95 = "type",
        peg$c96 = { type: "literal", value: "TYPE", description: "\"TYPE\"" },
        peg$c97 = "procedure",
        peg$c98 = { type: "literal", value: "PROCEDURE", description: "\"PROCEDURE\"" },
        peg$c99 = "as",
        peg$c100 = { type: "literal", value: "AS", description: "\"AS\"" },
        peg$c101 = "table",
        peg$c102 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
        peg$c103 = { type: "any", description: "any character" },
        peg$c104 = "(",
        peg$c105 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c106 = ")",
        peg$c107 = { type: "literal", value: ")", description: "\")\"" },
        peg$c108 = "+",
        peg$c109 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c110 = "-",
        peg$c111 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c112 = ",",
        peg$c113 = { type: "literal", value: ",", description: "\",\"" },
        peg$c114 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c115 = { type: "class", value: "[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]", description: "[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]" },
        peg$c116 = { type: "other", description: "whitespace" },
        peg$c117 = "\t",
        peg$c118 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c119 = "\x0B",
        peg$c120 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c121 = "\f",
        peg$c122 = { type: "literal", value: "\f", description: "\"\\f\"" },
        peg$c123 = " ",
        peg$c124 = { type: "literal", value: " ", description: "\" \"" },
        peg$c125 = "\xA0",
        peg$c126 = { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
        peg$c127 = "\uFEFF",
        peg$c128 = { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
        peg$c129 = /^[\n\r\u2028\u2029]/,
        peg$c130 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c131 = { type: "other", description: "end of line" },
        peg$c132 = "\n",
        peg$c133 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c134 = "\r\n",
        peg$c135 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c136 = "\r",
        peg$c137 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c138 = "\u2028",
        peg$c139 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c140 = "\u2029",
        peg$c141 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c142 = { type: "other", description: "comment" },
        peg$c143 = void 0,
        peg$c144 = "*/",
        peg$c145 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c146 = function() {return {multi:text()}},
        peg$c147 = "/*",
        peg$c148 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c149 = function(x) {return x},
        peg$c150 = function() {return {single:text()}},
        peg$c151 = "--",
        peg$c152 = { type: "literal", value: "--", description: "\"--\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsecreate() {
      var s0;

      s0 = peg$parseprocedure();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetableValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetable();
        }
      }

      return s0;
    }

    function peg$parsecreateoralter() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c0) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c2) {
          s0 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
      }

      return s0;
    }

    function peg$parseprocedure() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateoralter();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews1();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsePROCEDURE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews1();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseschema();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsename();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseWhitespaceSingleLineComment();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c5;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseparams();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c5;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseAS();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsews1();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsebody();
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c6(s6, s7, s8, s9);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsetableValue() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateoralter();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews1();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTYPE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews1();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseschema();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsename();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews1();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseAS();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews1();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseTABLE();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsews();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parselparen();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseWhitespaceSingleLineComment();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$c5;
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsefields();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parsews();
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parserparen();
                                      if (s17 !== peg$FAILED) {
                                        s18 = peg$parsews();
                                        if (s18 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c7(s6, s7, s14, s15);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c4;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c4;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c4;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c4;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c4;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c4;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsetable() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreateoralter();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews1();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTABLE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews1();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseschema();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsename();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parselparen();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseWhitespaceSingleLineComment();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c5;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsefields_and_constraints();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsews();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parserparen();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsews();
                                if (s14 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c8(s6, s7, s10, s11);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c4;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c4;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsename() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c12.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
          }
        } else {
          s3 = peg$c4;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c17.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c17.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
          }
        } else {
          s1 = peg$c4;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenames() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseorder();
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parsews();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsecomma();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsews();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsename();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsews();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseorder();
                        if (s12 === peg$FAILED) {
                          s12 = peg$c5;
                        }
                        if (s12 !== peg$FAILED) {
                          peg$reportedPos = s6;
                          s7 = peg$c19(s10, s12);
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c4;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c4;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c4;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c4;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c4;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c4;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsecomma();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsename();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsews();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseorder();
                          if (s12 === peg$FAILED) {
                            s12 = peg$c5;
                          }
                          if (s12 !== peg$FAILED) {
                            peg$reportedPos = s6;
                            s7 = peg$c19(s10, s12);
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c4;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c4;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c4;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c4;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c4;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c4;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c20(s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseschema() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c23(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsenamespace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c24(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsefullname() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenamespace();
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 === peg$FAILED) {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c25(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseparams() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews1();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseparam();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseparam();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c26(s7, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseparam();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c26(s7, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c4;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews1();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c27(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsews1();
      }

      return s0;
    }

    function peg$parsefields_and_constraints() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefield_or_constraint();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsefield_or_constraint();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c26(s7, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefield_or_constraint();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c26(s7, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c4;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews1();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c28(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsefield_or_constraint() {
      var s0;

      s0 = peg$parseconstraint();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefield();
      }

      return s0;
    }

    function peg$parsefields() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefield();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecomma();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsefield();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c29(s7, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomma();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefield();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c29(s7, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c4;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c30(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseparam() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseparam_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews1();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparam_type();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsews1();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c31) {
                s6 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c33;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsevalue();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c4;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c4;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c4;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c4;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsews1();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c35) {
                    s8 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                  }
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c4;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c4;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c5;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c37(s1, s3, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseparam_name() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c38;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews1();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparam_type();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentity();
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenot_nullable();
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsedefault();
                if (s6 === peg$FAILED) {
                  s6 = peg$c5;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c41(s1, s3, s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsedefault() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c42) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselparen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsedefault_value();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parserparen();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c44(s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsedefault_value() {
      var s0;

      s0 = peg$parsesigned_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_literal();
      }

      return s0;
    }

    function peg$parseconstraint() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews1();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews1();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepk_constraint();
              if (s5 === peg$FAILED) {
                s5 = peg$parsefk_constraint();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseunique_constraint();
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c47(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsepk_constraint() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c48) {
        s1 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclustered();
          if (s3 === peg$FAILED) {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parselparen();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenames();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseorder();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c5;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parserparen();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c50(s3, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseclustered() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c51) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c53) {
          s0 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
      }

      return s0;
    }

    function peg$parseorder() {
      var s0;

      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c55) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c57) {
          s0 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
      }

      return s0;
    }

    function peg$parsefk_constraint() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c59) {
        s1 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselparen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserparen();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews1();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 10) === peg$c61) {
                        s9 = peg$c61;
                        peg$currPos += 10;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c62); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews1();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsefullname();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsews();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parselparen();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsename();
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsews();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parserparen();
                                    if (s16 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c63(s5, s11, s14);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c4;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c4;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c4;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c4;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseunique_constraint() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c64) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselparen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenames();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserparen();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c66(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseparam_type() {
      var s0;

      s0 = peg$parsetable_type();
      if (s0 === peg$FAILED) {
        s0 = peg$parsescalar_type();
      }

      return s0;
    }

    function peg$parsenot_nullable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsews1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c69) {
            s2 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseidentity() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews1();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentity_arguments();
          if (s3 === peg$FAILED) {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c74(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseidentity_arguments() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselparen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesigned_number();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecomma();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesigned_number();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsews();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parserparen();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c75(s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsetable_type() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c76(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsescalar_type() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselparen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesigned_number();
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c77) {
                  s6 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parserparen();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c79(s6);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c4;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c4;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c4;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c4;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselparen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesigned_number();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecomma();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsews();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsesigned_number();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsews();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parserparen();
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s2;
                              s3 = peg$c80(s6, s10);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c4;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c4;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c4;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c4;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c4;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c4;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c4;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c4;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c4;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsesigned_number() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseplus();
      if (s1 === peg$FAILED) {
        s1 = peg$parseminus();
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumeric_literal();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c82();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parsenumeric_literal();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_literal();
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
        }
      }

      return s0;
    }

    function peg$parsestring_literal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsequote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c83.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseqq();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c83.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseqq();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c85(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseqq() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsequote();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequote();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c86();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsenumeric_literal() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedigit();
        }
      } else {
        s2 = peg$c4;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsedecimal_point();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsedigit();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsedigit();
            }
          } else {
            s5 = peg$c4;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c4;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c5;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c4;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c4;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsedecimal_point();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedigit();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsedigit();
            }
          } else {
            s3 = peg$c4;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c4;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c4;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseE();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseplus();
          if (s4 === peg$FAILED) {
            s4 = peg$parseminus();
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c5;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsedigit();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsedigit();
              }
            } else {
              s5 = peg$c4;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c4;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c87.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }

      return s0;
    }

    function peg$parsequote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c89;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parsedecimal_point() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c21;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parseE() {
      var s0;

      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c91) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseWhiteSpace();
      if (s3 !== peg$FAILED) {
        peg$reportedPos = s2;
        s3 = peg$c93();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseLineTerminatorSequence();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c93();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseWhiteSpace();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c93();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseLineTerminatorSequence();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c93();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$parseComment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsews1() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseWhiteSpace();
      if (s3 !== peg$FAILED) {
        peg$reportedPos = s2;
        s3 = peg$c93();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseLineTerminatorSequence();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c93();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseWhiteSpace();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c93();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseLineTerminatorSequence();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c93();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$parseComment();
            }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCREATE() {
      var s0;

      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c2) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parseTYPE() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c95) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }

      return s0;
    }

    function peg$parsePROCEDURE() {
      var s0;

      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c97) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parseAS() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c99) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parseTABLE() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    function peg$parsebody() {
      var s0, s1;

      s0 = [];
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
      }

      return s0;
    }

    function peg$parselparen() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c104;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }

      return s0;
    }

    function peg$parserparen() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c106;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }

      return s0;
    }

    function peg$parseplus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c108;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }

      return s0;
    }

    function peg$parseminus() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c110;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c112;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c114.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c117;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c119;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c121;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c123;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c124); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c125;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c126); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c127;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c128); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseZs();
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c129.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c132;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c134) {
          s0 = peg$c134;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c136;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c137); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c138;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c139); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c140;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c141); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseMultiLineComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseMultiLineCommentBody() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c144) {
        s4 = peg$c144;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c143;
      } else {
        peg$currPos = s3;
        s3 = peg$c4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSourceCharacter();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c4;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c144) {
          s4 = peg$c144;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c143;
        } else {
          peg$currPos = s3;
          s3 = peg$c4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSourceCharacter();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c146();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c147) {
        s1 = peg$c147;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultiLineCommentBody();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c144) {
            s3 = peg$c144;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c147) {
        s1 = peg$c147;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c144) {
          s5 = peg$c144;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c143;
        } else {
          peg$currPos = s4;
          s4 = peg$c4;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c4;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c144) {
            s5 = peg$c144;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c143;
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c144) {
            s3 = peg$c144;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseSingleLineCommentBody() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseLineTerminator();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c143;
      } else {
        peg$currPos = s3;
        s3 = peg$c4;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseSourceCharacter();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c4;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c143;
        } else {
          peg$currPos = s3;
          s3 = peg$c4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSourceCharacter();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c150();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c151) {
        s1 = peg$c151;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSingleLineCommentBody();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c149(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseWhitespaceSingleLineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c151) {
          s2 = peg$c151;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleLineCommentBody();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
